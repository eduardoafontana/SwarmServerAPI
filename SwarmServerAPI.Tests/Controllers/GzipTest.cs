using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SwarmServerAPI.AppCode.Repository;

namespace SwarmServerAPI.Tests.SwarmServerAPI.Tests.Controllers
{
    [TestClass]
    public class GZipTest
    {
        [TestMethod]
        public void GZipCompressTest()
        {
            byte[] buffer = Encoding.Unicode.GetBytes("Some data to be gzipped.");

            MemoryStream ms = new MemoryStream();
            using (GZipStream zip = new GZipStream(ms, CompressionMode.Compress, true))
            {
                zip.Write(buffer, 0, buffer.Length);
            }

            ms.Position = 0;

            byte[] compressedBuffer = new byte[ms.Length];
            ms.Read(compressedBuffer, 0, compressedBuffer.Length);

            byte[] gzBuffer = new byte[compressedBuffer.Length + 4];
            Buffer.BlockCopy(compressedBuffer, 0, gzBuffer, 4, compressedBuffer.Length);
            Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length), 0, gzBuffer, 0, 4);

            string output = Convert.ToBase64String(gzBuffer);
        }

        [TestMethod]
        public void GZipUncompressTest()
        {
            byte[] gzBuffer = Convert.FromBase64String("MAAAAB+LCAAAAAAABAALZshnyGVIZVBgSGFIZCgBYgUgmQ8kk8Ci6QxVDJkMBUCYClShxwAA4OaqOjAAAAA=");

            using (MemoryStream ms = new MemoryStream())
            {
                int msgLength = BitConverter.ToInt32(gzBuffer, 0);
                ms.Write(gzBuffer, 4, gzBuffer.Length - 4);

                byte[] buffer = new byte[msgLength];

                ms.Position = 0;
                using (GZipStream zip = new GZipStream(ms, CompressionMode.Decompress))
                {
                    zip.Read(buffer, 0, buffer.Length);
                }

                string output = Encoding.Unicode.GetString(buffer, 0, buffer.Length);
            }
        }

        [TestMethod]
        public void String64Bits()
        {
            byte[] gzBuffer = Convert.FromBase64String("");

            string outputDefault = Encoding.Default.GetString(gzBuffer);
            string outputUTF8 = Encoding.UTF8.GetString(gzBuffer);
            string outputUnicode = Encoding.Unicode.GetString(gzBuffer);

            string output = Convert.ToBase64String(gzBuffer);
        }

        [TestMethod]
        public void String64BitsOldDataString()
        {
            byte[] gzBuffer = Convert.FromBase64String("7A8AAB+LCAAAAAAABAC9V21vEkEQns8m/ofzPkFiUNoSTYskTYlNjVpiSfxQiIHjaKv0DrnDioT/7jOze7AH92qx2Sy3tzuvz+zMHHMK6I48uiGLrmiBt5BcuqcTek7PaJ5yWqMz8mmC4ZKDvTu8eTit0Tl2PMwZ9pxcKW3sD7DvgT8QOQ6eeVwXdJlL81H2f+bSdfH8jbd8ulv45MLakabgvQEofiRa/Bm0D+BWuPg0xrpGH2TtaXqeHmTcgzagKVYOVpZgq7gY31OcTKkO7l3ab7DGx8qkD4WCf1n+Un4tPaawcQgqxtnCnIgHAdYdeOfD8pnoMHniEpIlsdehRH289uJCsGWLxmKfmygnWXo0lFxGcy6es43MY8FSV6JmwfpotSokqy2jrJTVOmLZSJiYbvtv0fGecElCfz8oJUt+OszO9C12sOPvAanrdc6prPol+Ki7WsFzAVtcyc+KpnAkz5lil6O5Y1GLqhj9TBu4FnFGNhNi30q4J0Em0ha9w/SkvuTJrsC2k5KxYWkDXYsteO9jNcLqE3b5PlSEYqYr3TV8t3AywzqAtvIRile7Gn0V2Yy3quEuNNqovq70G184BlILR5gvcFY16mmalq6uih3x7Ra54oOfczJMPTFxTuOvFNL+CqMrtdXRfqkKrTol2zBJ0Md9aYPGLEMCI3SG6tLDuAI/x+MeGTuQWPKuj4wLJe9CyTuTu4Y167LpJTTb4FzsaCiGMvvZBv0Qem50Fzal8BfCKXAbSe5N/klm8v3w0Yft1NueJus9bOCufVsijpuMM/OgJVnAIy0/49SsT2W5LVwR9kOMaO1g2JKrxSwzNVixt6gGKttsZG1P6+1pbT2tm599zMdiMdSD9SVX4JpEItDfigO5lX/wdgmu7/q7spmqobVVhyIdRaMYxyrKiO0Kuo3bUvDZrde8ewxUlxpJsxOrM7VfpwM6pCNqxHBX3VXR8W8DdPxcCcUyU2ID0g4htZ4j8UhL7GMWjW52L7bkfjoam8fEOFsPRzovPkWj3tFVSMV0Gnszs9akS++hpmRTlqpxM/E80P08uSaYdFndurimTX2NtJkUFdyT1xgHusK0cascVE7+txMKlSt9oPoElrylN7iXyg6+AQ8ZVpSz5Fz449rK+/P/pZT5KvpC6r/npudlf9nF39TvX2YhqyHsDwAA");

            string outputDefault = Encoding.Default.GetString(gzBuffer);
            string outputUTF8 = Encoding.UTF8.GetString(gzBuffer);
            string outputUnicode = Encoding.Unicode.GetString(gzBuffer);

            string output = Convert.ToBase64String(gzBuffer);
        }
    }
}
