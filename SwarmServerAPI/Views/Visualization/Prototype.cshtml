
@Styles.Render("~/Content/detail-box")
@Scripts.Render("~/bundles/detail-box")
@Scripts.Render("~/bundles/threejs")

<style>
    body, html {
        height: 100%;
        padding-bottom: 50px;
    }
    html, body, .container-fluid, .row, main, .canvasRenderRelativeSize {
        height: 100%;
    }
</style>
<script>
    function drawLine(x1, y1, z1, x2, y2, z2, hexColor) {
        var geometry = new THREE.Geometry();
        geometry.vertices.push(new THREE.Vector3(x1, y1, z1));
        geometry.vertices.push(new THREE.Vector3(x2, y2, z2));

        var material = new THREE.LineBasicMaterial({ color: hexColor });

        return new THREE.Line(geometry, material);
    }

    function drawCubeOnGraph(positionX, positionZ, height, hexColor) {
        var ySize = height;
        var xSize = 0.6;
        var zSize = 0.6;

        var geometry = new THREE.BoxGeometry(xSize, ySize, zSize);
        var material = new THREE.MeshBasicMaterial({ color: hexColor });
        material.opacity = 0.5;
        material.transparent = true;
        material.representation = 'cubeOnGraph';
        var cube = new THREE.Mesh(geometry, material);

        cube.position.y = ySize / 2;
        cube.position.x = xSize / 2 + (1 - xSize) / 2 + 0.1 + positionX;
        cube.position.z = zSize / 2 + (1 - zSize) / 2 + 0.1 + positionZ;

        return cube;
    }

    function getRamdomColor() {
        return '#' + Math.floor(Math.random() * 16777215).toString(16);
    }

    function onDocumentMouseMove(event) {
        var positions = document.body.getElementsByClassName("canvasRenderRelativeSize")[0].getBoundingClientRect();

        setMouseRelativePosition(event, positions);
    }

    function setMouseRelativePosition(eventAbsolute, relativePositions) {
        mouse.x = ((eventAbsolute.clientX - relativePositions.x) / getRelativeWidth()) * 2 - 1;
        mouse.y = - ((eventAbsolute.clientY - relativePositions.y) / getRelativeHeight()) * 2 + 1;
    }

    function onDocumentMouseDown(event) {
        var positions = document.body.getElementsByClassName("canvasRenderRelativeSize")[0].getBoundingClientRect();
        setMouseRelativePosition(event, positions);

        raycaster.setFromCamera(mouse, camera);

        var intersects = raycaster.intersectObjects(scene.children);
        if (intersects.length > 0) {
            var intersect = intersects[0];

            console.log(intersect.object.material.representation);

            if (intersect.object.material.representation == 'ringOnGraph') {
                var box = document.getElementsByClassName("detail-box")[0];

                if (box.style.visibility == 'visible')
                    box.style.visibility = 'hidden';
                else
                    box.style.visibility = 'visible';
            }
        }
    }

    function getRelativeHeight() {
        return document.body.getElementsByClassName("canvasRenderRelativeSize")[0].offsetHeight;
    }

    function getRelativeWidth() {
        return document.body.getElementsByClassName("canvasRenderRelativeSize")[0].offsetWidth;
    }

    function onWindowResize() {
        camera.aspect = getRelativeWidth() / getRelativeHeight();
        camera.updateProjectionMatrix();

        renderer.setSize(getRelativeWidth(), getRelativeHeight());
    }

    var camera = new THREE.PerspectiveCamera(45, 0, 1, 500);
    var scene = new THREE.Scene();
    var mouse = new THREE.Vector2();
    var raycaster = new THREE.Raycaster();
    var renderer = new THREE.WebGLRenderer();

    document.addEventListener("DOMContentLoaded", function () {
        renderer.setSize(getRelativeWidth(), getRelativeHeight());
        document.body.getElementsByClassName("canvasRenderRelativeSize")[0].appendChild(renderer.domElement);

        camera.position.set(60, 60, 60);
        camera.lookAt(new THREE.Vector3(0, 0, 0));

        var orbit = new THREE.OrbitControls(camera, renderer.domElement);
        orbit.enableZoom = true;

        //--
        //scene.add( drawLine(0, 0, 0, 30, 0, 0, 0x0000ff) ); //x axis is blue
        //scene.add( drawLine(0, 0, 0, 0, 30, 0, 0x00ff00) ); //y axis is green
        //scene.add( drawLine(0, 0, 0, 0, 0, 30, 0xff0000) ); //z axis is red

        scene.add(new THREE.AxesHelper(30));
        //--

        //var geometryPlane = new THREE.PlaneGeometry( 5, 5 );
        //var materialPlane = new THREE.MeshBasicMaterial( {color: 0xffff00, side: THREE.DoubleSide} );
        //var plane = new THREE.Mesh( geometryPlane, materialPlane );

        //plane.position.y = 10;
        //plane.position.x = 10;

        //scene.add( plane );
        //--

        var ghSize = 30;

        var gridHelper = new THREE.GridHelper(ghSize, 30);
        gridHelper.position.x = ghSize / 2 + 0.1;
        gridHelper.position.y = 0;
        gridHelper.position.z = ghSize / 2 + 0.1;

        scene.add(gridHelper);
        //--

        scene.add(drawCubeOnGraph(0, 9, Math.floor(Math.random() * 31), getRamdomColor()));
        scene.add(drawCubeOnGraph(1, 9, Math.floor(Math.random() * 31), getRamdomColor()));
        scene.add(drawCubeOnGraph(2, 9, Math.floor(Math.random() * 31), getRamdomColor()));
        scene.add(drawCubeOnGraph(0, 10, Math.floor(Math.random() * 31), getRamdomColor()));
        scene.add(drawCubeOnGraph(1, 10, Math.floor(Math.random() * 31), getRamdomColor()));
        scene.add(drawCubeOnGraph(2, 10, Math.floor(Math.random() * 31), getRamdomColor()));
        scene.add(drawCubeOnGraph(0, 11, Math.floor(Math.random() * 31), getRamdomColor()));
        scene.add(drawCubeOnGraph(1, 11, Math.floor(Math.random() * 31), getRamdomColor()));
        scene.add(drawCubeOnGraph(2, 11, Math.floor(Math.random() * 31), getRamdomColor()));
        scene.add(drawCubeOnGraph(3, 2, Math.floor(Math.random() * 31), getRamdomColor()));
        scene.add(drawCubeOnGraph(7, 4, Math.floor(Math.random() * 31), getRamdomColor()));
        scene.add(drawCubeOnGraph(1, 20, Math.floor(Math.random() * 31), getRamdomColor()));

        var cubeWithRintHeight = Math.floor(Math.random() * 31);
        scene.add(drawCubeOnGraph(12, 15, cubeWithRintHeight, getRamdomColor()));

        //--

        var geometrySphere = new THREE.SphereGeometry(0.5, 20, 20);
        var materialSphere = new THREE.MeshBasicMaterial({ color: 0xffff00 });
        var sphere = new THREE.Mesh(geometrySphere, materialSphere);

        sphere.position.y = 0.5;
        sphere.position.x = 0.5 + 0.1 + 3;
        sphere.position.z = 0.5 + 0.1 + 2;

        scene.add(sphere);
        //--

        //passei para declaração global
        //var mouse = new THREE.Vector2()
        var intersected = null;

        document.body.getElementsByClassName("canvasRenderRelativeSize")[0].addEventListener('mousemove', onDocumentMouseMove, false);

        //passei para declaração global
        //var raycaster = new THREE.Raycaster();
        //--

        var geometryTorus = new THREE.TorusGeometry(0.5, 0.2, 10, 30); //Ring 3d
        var materialTorus = new THREE.MeshBasicMaterial({ color: 0x0000ff });
        materialTorus.representation = 'ringOnGraph';
        var torus = new THREE.Mesh(geometryTorus, materialTorus);

        torus.position.y = 0.5 + cubeWithRintHeight / 2;
        torus.position.x = 0.5 + 0.1 + 12;
        torus.position.z = 0.5 + 0.1 + 15;
        torus.rotation.x = 1.6;//flip to horizontal

        scene.add(torus);
        //--

        document.addEventListener('mousedown', onDocumentMouseDown, false);

        //--
        window.addEventListener('resize', onWindowResize, false);
        //--
        var animate = function () {
            requestAnimationFrame(animate);

            //--
            raycaster.setFromCamera(mouse, camera);

            var intersects = raycaster.intersectObjects(scene.children);

            if (intersects.length > 0) {
                var iCubeOnGraph = -1;
                for (var i = 0; i < intersects.length; i++) {
                    if (intersects[i].object.material.representation == 'cubeOnGraph'
                        || intersects[i].object.material.representation == 'ringOnGraph') {
                        iCubeOnGraph = i;
                        break;
                    }
                }

                if (iCubeOnGraph != -1 && intersected != intersects[iCubeOnGraph].object) {
                    if (intersected != null)
                        intersected.material.color.setHex(intersected.currentHex);

                    intersected = intersects[iCubeOnGraph].object;
                    intersected.currentHex = intersected.material.color.getHex();
                    intersected.material.color.setHex(0xff0000);
                }
            } else {
                if (intersected != null)
                    intersected.material.color.setHex(intersected.currentHex);

                intersected = null;
            }
            //--

            renderer.render(scene, camera);
        };

        onWindowResize();
        animate();
    });
</script>
<h2>Prototype</h2>
<br />
<div class="detail-box fade-in">
    <div class="detail-box-header">
        Click here to move
        <div class="detail-box-minimize">-</div>
    </div>
    <h3>título</h3>
    <p>parágrafo</p>
    <p>parágrafo</p>
    <hr>
    <p>parágrafo</p>
    <p>parágrafo</p>
</div>
<div class="canvasRenderRelativeSize"></div>