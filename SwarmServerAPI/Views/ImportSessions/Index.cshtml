@model SwarmServerAPI.UI.SwarmServerAPI.Models.ImportSessionModel

<h1>Import Sessions</h1>
<br />
<h3>Import session from local Json text files</h3>
<hr />

@using (Html.BeginForm("Index", "ImportSessions", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => Model.Files, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => Model.Files, "", new { @type = "file", @multiple = "multiple" })
                @Html.ValidationMessageFor(model => Model.Files, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Upload" class="btn btn-primary" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10 text-success">
                @ViewBag.FilesValid of @ViewBag.TotalFiles files ready to import.
            </div>
        </div>

    </div>
}
<table class="table">
    <tr>
        <th>File</th>
        <th>Status</th>
        <th>Message</th>
    </tr>
    @for (int i = 0; i < Model.FilesToUpload.Count; i++)
    {
        <tr>
            <td class="fileName">
                @Html.DisplayTextFor(model => Model.FilesToUpload[i].FileName)
            </td>
            <td class="status">
                @Html.DisplayTextFor(model => Model.FilesToUpload[i].Status)
            </td>
            <td class="message">
                @Html.DisplayTextFor(model => Model.FilesToUpload[i].Message)
            </td>
        </tr>
    }
</table>
<script type="text/javascript">
    $(function () {
        var delay = 500;

        var tid = setTimeout(callProcessPending, delay);

        function callProcessPending() {
            processPending();

            if ($(".status:contains('Pending')").length > 0)
                tid = setTimeout(callProcessPending, delay);
        }

        function processPending() {
            $(".status:contains('Pending')").each(function () {
                var self = this;

                $.get("api/importsessionfiles?fileName=" + $(self).parent().find('.fileName').text().trim(), function (data) {
                    $(self).parent().find('.message').text(data.Message);
                    $(self).text(data.StatusName);
                });
            });
        }
    });
</script>